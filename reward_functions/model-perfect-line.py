import math

def reward_function(params):

   if params['is_offtrack']:
      return float(-100)

   perfect_line = [[3.3966135878355668, 1.4048339560864744], [3.2705586838304703, 1.4268700510949406], [3.1451706167544136, 1.4437553453355534], [2.974481553982661, 1.4623921847704768], [2.6719899439851504, 1.4823624867180307], [2.3687759972195184, 1.492759677452452], [2.065674981941035, 1.4981191946910233], [1.7698551761254664, 1.5008807762685423], [1.4829242752885623, 1.5019143072956098], [1.1827320920156181, 1.501640238015787], [0.8999462217968416, 1.5003186329966616], [0.6057667798555759, 1.4981002309005096], [0.30333388910664355, 1.495059493673385], [-0.00010562534685010228, 1.4913699403956748], [-0.30332947749746564, 1.4882379588066283], [-0.6066819029940562, 1.4857027667012066], [-0.9100546126511451, 1.4838331514299499], [-1.2134304776723992, 1.482703119674263], [-1.5167746245391232, 1.4824780027960844], [-1.8201495602510778, 1.483338915169789], [-2.123509329295038, 1.4855260185257835], [-2.426832572126357, 1.4892906879260601], [-2.7297849190293486, 1.4949451894907189], [-3.0334500011881746, 1.5027659952471795], [-3.338164340588126, 1.5018740011260903], [-3.6214476122848094, 1.4834469944535176], [-3.8539070616212063, 1.4495397788158864], [-4.08736552, 1.38697438], [-4.30556573, 1.28907047], [-4.481479920826172, 1.1392953527462293], [-4.601595077325136, 0.9738754036469437], [-4.705271051897833, 0.7530106074897277], [-4.76149703, 0.506685023], [-4.7638283659561464, 0.26593200375674503], [-4.72186912, 0.039066901099999995], [-4.63340804, -0.180418361], [-4.4961686, -0.376413035], [-4.326211171789533, -0.5431768500789482], [-4.136555689847952, -0.6814185759944277], [-3.9097956013697694, -0.8083243651046945], [-3.653366250604141, -0.9175375996289012], [-3.365501764346146, -1.0085677507189494], [-3.07092028, -1.07503883], [-2.7758980548235677, -1.1214923038291584], [-2.4791746, -1.1529373], [-2.181285174365847, -1.1723064202278237], [-1.8812307725447066, -1.1819292352456756], [-1.5815029744641789, -1.1835640490142252], [-1.2910815963241273, -1.178946239805837], [-0.9960387456106391, -1.168975635264092], [-0.6962547072825865, -1.1542499849173984], [-0.426825136847027, -1.137797369031898], [-0.16735184915399923, -1.1194225517318737], [0.11926141264756135, -1.0965407496611739], [0.4184293973461625, -1.0710256623545622], [0.6882644568423436, -1.050530954169829], [0.9160942828141603, -1.035980372306242], [1.148535640141928, -1.025701436043126], [1.42645693049641, -1.0204378846125017], [1.70606482, -1.02546064], [1.9766576494400883, -1.0438718977075503], [2.260888175138789, -1.081286514646763], [2.5423335610133244, -1.1320226723691325], [2.801333348217993, -1.190206707141458], [2.990308278924103, -1.2388413501480622], [3.2200029174018656, -1.3078931069309563], [3.4891994, -1.37563561], [3.753567404133212, -1.4176151209321899], [4.0149382426388796, -1.4239643435875133], [4.246250497949515, -1.3892599457601524], [4.435461198470236, -1.322008342348251], [4.61056875, -1.20656648], [4.74879565, -1.02121557], [4.836752136696826, -0.8166442251676547], [4.890862153090682, -0.5751088919972673], [4.902931536414644, -0.29285303449637196], [4.867078854657986, -0.008674816628517297], [4.789486288054825, 0.2647843965923884], [4.682074048889052, 0.5108059465272291], [4.558830873551872, 0.7181085512056679], [4.41912338, 0.897792409], [4.2489853, 1.06151291], [4.05933211, 1.18474399], [3.823014394141654, 1.2888920235362777], [3.5564160556256272, 1.3693432098236926], [3.3966135878355668, 1.4048339560864744]]


   x = params['x']
   y = params['y']
   closest_waypoints = params['closest_waypoints']
   x1, y1 = tuple(perfect_line[closest_waypoints[0]])
   x2, y2 = tuple(perfect_line[closest_waypoints[1]])

   reward = -1
   # reward += params['speed']

   # Distance to perfect line
   numerator = abs((y2 - y1) * x - (x2 - x1) * y + x2 * y1 - y2 * x1)
   denominator = math.sqrt(math.pow(y2 - y1, 2) + math.pow(x2 - x1, 2))
   if denominator == 0:
      denominator = 0.0001
   distance_to_perfect_line = numerator / denominator

   # if distance_to_perfect_line > max_distance:
      # reward -= 40
   # distance_penalty = math.exp(-distance_to_perfect_line * 10)  # 0..1
   reward *= distance_to_perfect_line * 10

   return float(reward)